%class "LangParser";
%package "lang.ast";

%embed {:
	static public class SyntaxError extends RuntimeException { public SyntaxError(String msg) {super(msg);}}
	// Disable syntax error recovery
	protected void recoverFromError(Symbol token, TokenStream in) {
		throw new SyntaxError("Cannot recover from the syntax error");
	}
:};

/* Names & Variables */
%terminals ID, INT, FLOAT, STRING, TRUE, FALSE;

/* Punctuation */
%terminals ASSIGN, DOT, COMMA, SEMI, LPARAM, RPARAM, LBRACE, RBRACE, NOT, STAR, AMP; 

/* Arithmetic */
%terminals PLUS, MINUS, DIV, MOD;

/* Boolean operators */
%terminals EQUALS, NOTEQ, LEQUAL, GEQUAL, LESS, GREATER, AND, OR;

/* Keywords */
%terminals IF, ELSE, WHILE, RETURN, BREAK, CONTINUE, STRUCT;

/* AST Classes */
%typeof program     = "Program";
%typeof unit        = "Unit";
%typeof units       = "List";
%typeof global      = "Global";

%typeof function     = "Function";
%typeof func_call    = "FuncExpr";
%typeof type_id      = "TypeId";
%typeof type_decl    = "TypeDecl";
%typeof id_use       = "IdUse";
%typeof id_decl      = "IdDecl";
%typeof arg_list     = "List";
%typeof arg_def      = "Argument";
%typeof param_list   = "List";
%typeof block        = "Block";
%typeof stmt         = "Statement";
%typeof stmt_list    = "List";
%typeof assign_stmt  = "AssignStmt";
%typeof decl_stmt    = "DeclareStmt";
%typeof while_stmt   = "WhileStmt";
%typeof if_stmt      = "IfStmt";
%typeof else_stmt    = "Opt<Statement>";
%typeof call_stmt    = "CallStmt";
%typeof break_stmt   = "BreakStmt";
%typeof cont_stmt    = "ContinueStmt";

%typeof expr1        = "Expr";
%typeof expr2        = "Expr";
%typeof expr3        = "Expr";
%typeof factor       = "Expr";
%typeof term         = "Expr";
%typeof literal      = "Literal";

%typeof struct = "Struct";
%typeof struct_decls = "List";
%typeof struct_decl = "StructDecl";

%goal program;

/* Goal: Program - list of functions */
program = units.list {: return new Program(list); :};

/* Compilation units */
units = unit.u {: return new List().add(u); :}
      | units.list unit.u {: return list.add(u); :};

unit = function | global | struct;
global  = decl_stmt.d {: return new Global(d); :};

struct = STRUCT type_decl.name LBRACE RBRACE {: return new Struct(name, new List()); :} // empty struct
       | STRUCT type_decl.name LBRACE struct_decls.decls RBRACE {: return new Struct(name,decls); :}
       ;

struct_decls = struct_decl.d {: return new List().add(d); :}
             | struct_decls.list struct_decl.d {: return list.add(d); :}
             ;

struct_decl = id_decl.decl SEMI {: return new Field(decl); :};

/* Types */
type_id = ID.name {: return new TypeId(name); :}
        | ID.name STAR {: return new PointerTypeId(name); :}
        ;

type_decl = ID.name {: return new TypeDecl(name); :};

/* Identifiers */
id_use  = ID.id {: return new IdUse(id); :}
        | id_use.struct DOT ID.field {: return new StructIdUse(field, struct); :}
        ;

id_decl = type_id.type ID.id {: return new IdDecl(type, id); :};

/* Function */
function = id_decl.id LPARAM arg_list.args RPARAM block.block {: return new Function(id,args,block); :};


/* Function argument */
arg_def = id_decl.name {: return new Argument(name); :};


/* Function definition arugment list */
arg_list = /* Empty */ {: return new List(); :}
         | arg_def.a {: return new List().add(a); :}
         | arg_list.list COMMA arg_def.a {: return list.add(a); :};


/* Function call */
func_call = id_use.f LPARAM param_list.params RPARAM {: return new FuncExpr(f, params); :};


/* Funcion call parameter list */
param_list = /* Empty */ {: return new List(); :}
           | expr1.e {: return new List().add(e); :}
           | param_list.list COMMA expr1.e {: return list.add(e); :};


/* Statements */
stmt = block 
     | if_stmt 
     | while_stmt 
     | assign_stmt 
     | decl_stmt 
     | call_stmt 
     | return_stmt
     | break_stmt
     | cont_stmt;

/* Declaration with optional initializer */
decl_stmt = id_decl.name SEMI {: return new DeclareStmt(name,new Opt<Expr>()); :}
          | id_decl.name ASSIGN expr1.e SEMI {: return new DeclareStmt(name,new Opt<Expr>(e)); :};

/* Assign statement */
assign_stmt = id_use.name ASSIGN expr1.exp SEMI {: return new AssignStmt(name,exp); :};

/* Call statement */
call_stmt = func_call.call SEMI {: return new CallStmt(call); :};

/* While statement */
while_stmt = WHILE LPARAM expr1.c RPARAM stmt.s {: return new WhileStmt(c,s); :};

/* If statement */
if_stmt = IF LPARAM expr1.c RPARAM block.then else_stmt.e {: return new IfStmt(c,then,e); :};
else_stmt = /* E */ {: return new Opt<Statement>(); :}
          | ELSE stmt.el {: return new Opt<Statement>(el); :};

/* Return statement */
return_stmt = RETURN SEMI {: return new ReturnStmt(new Opt<Expr>()); :}
            | RETURN expr1.e SEMI {: return new ReturnStmt(new Opt<Expr>(e)); :};

/* Break & Continue statements */
break_stmt = BREAK SEMI {: return new BreakStmt(); :};
cont_stmt  = CONTINUE SEMI {: return new ContinueStmt(); :};


/* Blocks */
stmt_list = stmt.s {: return new List().add(s); :}
          | stmt_list.list stmt.s {: return list.add(s); :};

block = LBRACE RBRACE {: return new Block(new List()); :} /* Empty block */
      | LBRACE stmt_list.list RBRACE {: return new Block(list); :}; /* Statement block */


/* Expressions */
expr1 = expr2
      | expr1.e1 AND expr2.e2 {: return new AndExpr(e1,e2); :}
      | expr1.e1 OR  expr2.e2 {: return new OrExpr(e1,e2); :}
      ;

expr2 = expr3.e 
      | expr2.c EQUALS  expr3.e {: return new EqualsExpr(c, e); :}
      | expr2.c NOTEQ   expr3.e {: return new NotEqualsExpr(c, e); :}
      | expr2.c LESS    expr3.e {: return new LessExpr(c, e); :}
      | expr2.c GREATER expr3.e {: return new GreaterExpr(c, e); :}
      | expr2.c LEQUAL  expr3.e {: return new LessEqualExpr(c, e); :}
      | expr2.c GEQUAL  expr3.e {: return new GreaterEqualExpr(c, e); :}
      ;

expr3 = term.t 
      | expr3.e PLUS  term.t {: return new AddExpr(e,t); :}
      | expr3.e MINUS term.t {: return new SubExpr(e,t); :}
      ;

term = factor.f 
     |        NOT  factor.f {: return new NotExpr(f); :}
     | term.t STAR factor.f {: return new MulExpr(t,f); :}
     | term.t DIV  factor.f {: return new DivExpr(t,f); :}
     | term.t MOD  factor.f {: return new ModExpr(t,f); :}
     | STAR factor.f        {: return new DerefExpr(f); :}
     | AMP factor.f         {: return new AddressExpr(f); :}
     ;

factor = id_use.id {: return new IdExpr(id); :}
       | LPARAM expr1.e RPARAM {: return new ParamExpr(e); :}
       | func_call
       | literal
       ;

literal = INT.i     {: return new IntLiteral(i); :}
        | FLOAT.f   {: return new FloatLiteral(f); :}
        | STRING.s  {: return new StringLiteral(s); :}
        | TRUE.i    {: return new BoolLiteral(i); :}
        | FALSE.i   {: return new BoolLiteral(i); :}
        ;
