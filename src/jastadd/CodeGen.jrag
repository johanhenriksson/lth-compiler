aspect CodeGen {
    private static int Program.next_label = 1;

    public static int Program.nextCounter() {
        return Program.next_label++;
    }

    syn String Function.llvmName() = "@" + getName().getID();

    public void Program.llvmGen(PrintStream out) {

        out.println("; LLVM Output\n");

        out.println("; Library Functions");
        for(Function f : predefinedFunctions())
            f.llvmGen(out);

        out.println("");

        for(int i = 0; i < getNumUnit(); i++)
            getUnit(i).llvmGen(out);
    }

    public void Unit.llvmGen(PrintStream out) {
        throw new RuntimeException("Not yet implemented");
    }

    public void Function.llvmGen(PrintStream out) {
        out.print("define ");
        getName().getType().type().llvmGen(out);
        out.print(" ");
        out.print(llvmName());
        out.print("(");
        // print args
        out.println(") {");
        // generate block
        out.println("}\n");
    }

    // LLVM type names
    public void Type.llvmGen(PrintStream out) {
        throw new RuntimeException("Not yet implemented");
    }
    public void VoidType.llvmGen(PrintStream out) { out.print("void"); }
    public void BoolType.llvmGen(PrintStream out) { out.print("i1"); }
    public void IntType.llvmGen(PrintStream out) { out.print("i64"); }
    public void FloatType.llvmGen(PrintStream out) { out.print("double"); }
}
