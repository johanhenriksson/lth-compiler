aspect CodeGen {
    private static int Program.next_label = 1;
    private static int Program.next_if = 1;
    private static int Program.next_while = 1;

    public static int Program.nextCounter() {
        return Program.next_label++;
    }
    public static void Program.resetCounter() {
        Program.next_label = 1;
        Program.next_if = 1;
        Program.next_while = 1;
    }

    public static String Program.nextTemp() {
        return "%_" + Program.nextCounter();
    }

    public static String Program.nextIf() {
        return "if" + Program.next_if++;
    }

    public static String Program.nextWhile() {
        return "while" + Program.next_while++;
    }

    syn String Function.llvmName() = "@" + getName().getID();

    public void Program.llvmGen(PrintStream out) {
        Program.resetCounter();

        // TODO: only used functions?
        out.println("; Library Functions");
        out.println("declare i8* @__malloc(i32)"); // malloc
        out.println("declare void @__delete(i8*)"); // free

        for(Function f : predefinedFunctions())
            f.llvmGen(out);

        out.println("");

        for(int i = 0; i < getNumUnit(); i++)
            getUnit(i).llvmGen(out);
    }

    public void Unit.llvmGen(PrintStream out) {
        throw new RuntimeException("Not yet implemented");
    }

    /** globals */
    public void Global.llvmGen(PrintStream out) {
        IdDecl id = getDeclareStmt().getName();
        out.print("@");
        out.print(id.getID());
        out.print(" = global ");
        id.type().llvmType(out);
        out.print(" ");
        if (getDeclareStmt().hasAssignExpr())
            out.print(getDeclareStmt().getAssignExpr().llvmGen(out));
        else
            out.print("0");
        out.println("\n");
    }

    inh boolean IdDecl.isGlobal();
    eq Program.getChild().isGlobal() = false;
    eq Global.getChild().isGlobal() = true;

    /** structs */

    public void Struct.llvmGen(PrintStream out) {
        out.print("%");
        out.print(getName().getID());
        out.println(" = type {");
        for(int i = 0; i < getNumStructDecl(); i++) {
            out.print("  ");
            getStructDecl(i).llvmGen(out);
            if (i < getNumStructDecl() - 1)
                out.print(",");
            out.println();
        }
        out.println("}\n");
    }

    public void StructDecl.llvmGen(PrintStream out) {
        throw new RuntimeException("Not yet implemented");
    }

    public void Field.llvmGen(PrintStream out) {
        Type t = getIdDecl().type();
        t.llvmGen(out); 
        if (t.isStruct())
            out.print("*");
    }


    /** functions */

    public void Function.llvmGen(PrintStream out) {
        Program.resetCounter();

        out.print("define ");
        getName().getType().type().llvmType(out);
        out.print(" ");
        out.print(llvmName());
        out.print("(");

        // print args
        for(int i = 0; i < getNumArgument(); i++) {
            Argument a = getArgument(i);
            a.getName().getType().type().llvmType(out);
            out.print(" %");
            out.print(a.getName().getID());
            
            if (i < getNumArgument() - 1)
                out.print(", ");
        }
        
        out.println(") {");
        // generate block
        getBody().llvmGen(out);

        // TODO: make sure the last statement is a return
        // OPT:  make sure all code paths return a value
        // decent, causes llvm compile errors if non-void functions dont return anything
        if (getName().type().equals(new VoidType()))
            out.println("ret void");

        out.println("}\n");
    }

    public void Block.llvmGen(PrintStream out) {
        for(int i = 0; i < getNumStatement(); i++) {
            getStatement(i).llvmGen(out);
        }
    }

    /** statements */

    public void Statement.llvmGen(PrintStream out) {
        throw new RuntimeException("Not implemented yet");
    }

    public void DeclareStmt.llvmGen(PrintStream out) {
        String name = "%" + getName().getID();
        Type t = getName().type();


        // allocate struct
        if (t.isStruct() && !hasAssignExpr()) {
            String sz_ptr = Program.nextTemp();
            String sz_i = Program.nextTemp();

        out.print(name);
        out.print(" = alloca ");
        t.llvmGen(out);
        out.println("*");

            //%Size = getelementptr %T* null, i32 1
            //%SizeI = ptrtoint %T* %Size to i32
            
            // trick to calculate size of a struct
            out.print(sz_ptr);
            out.print(" = getelementptr ");
            t.llvmGen(out);
            out.print(", ");
            t.llvmGen(out);
            out.println("* null, i32 1");

            // cast to int
            out.print(sz_i);
            out.print(" = ptrtoint ");
            t.llvmGen(out);
            out.print("* ");
            out.print(sz_ptr);
            out.println(" to i32");
            
            // malloc sizeof(struct) bytes
            String mem_ptr = Program.nextTemp();
            String struct_ptr = Program.nextTemp();
            out.print(mem_ptr);
            out.print(" = call i8* @__malloc(i32 ");
            out.print(sz_i);
            out.println(")");

            // cast to struct ptr
            out.print(struct_ptr);
            out.print(" = bitcast i8* ");
            out.print(mem_ptr);
            out.print(" to ");
            t.llvmGen(out);
            out.println("*");

            // store struct ptr 
            out.print("store ");
            t.llvmGen(out);
            out.print("* ");
            out.print(struct_ptr);
            out.print(", ");
            t.llvmGen(out);
            out.print("** ");
            out.println(name);
        }
        else {
            out.print(name);
            out.print(" = alloca ");
            t.llvmType(out);
            out.println();

            if (hasAssignExpr()) {
                String r_var = getAssignExpr().llvmGen(out);
                out.print("store ");
                t.llvmType(out);
                out.print(" ");
                out.print(r_var);
                out.print(", ");
                t.llvmType(out);
                out.print("* ");
                out.println(name);
            }
        }
    }

    public void CallStmt.llvmGen(PrintStream out) {
        getFunction().llvmGen(out);
    }

    public void ReturnStmt.llvmGen(PrintStream out) {
        // return expr
        String ret_var = "unknown";
        if (hasReturnExpr())
            ret_var = getReturnExpr().llvmGen(out);

        out.print("ret ");
        expectedType().llvmType(out);
        if (hasReturnExpr()) {
            out.print(" ");
            out.print(ret_var);
        }
        out.println("");
    }

    syn String IdUse.llvm_struct_field_idx() = "";
    eq StructIdUse.llvm_struct_field_idx() {
        int field_idx = struct().fieldIndex(getID());
        return getStruct().llvm_struct_field_idx() + 
            ", i32 0, i32 " + String.valueOf(field_idx);
    }

    public void AssignStmt.llvmGen(PrintStream out) {
        String result_ptr = getName().llvmGenAddress(out);
        Type t = getName().type();

        String r_var = getAssignExpr().llvmGen(out);
        out.print("store ");
        getName().type().llvmType(out);
        out.print(" ");
        out.print(r_var);
        out.print(", ");
        getName().type().llvmType(out);
        out.print("* ");
        out.println(result_ptr);
    }

    public void DeleteStmt.llvmGen(PrintStream out) {
        IdUse id = getIdUse();
        if (!id.type().isStruct())
            throw new RuntimeException("Only structs may be deleted");

        String ptr = id.llvmGen(out);

        // cast to i8*
        String free_ptr = Program.nextTemp();
        out.print(free_ptr);
        out.print(" = bitcast ");
        id.type().llvmType(out);
        out.print(" ");
        out.print(ptr);
        out.println(" to i8*");

        // call free
        out.print("call void @__delete(i8* ");
        out.print(free_ptr);
        out.println(")");

        // TODO set ptr to zero?
    }

    public void IfStmt.llvmGen(PrintStream out) {
        String if_id = Program.nextIf();
        String cond_var = getCondition().llvmGen(out);

        // if cond_var == 1
        out.print("br i1 ");
        out.print(cond_var);

        // then goto
        out.print(", label %");
        out.print(if_id + "_then");

        // else goto 
        out.print(", label %");
        if (hasElse())
            out.println(if_id + "_else");
        else
            out.println(if_id + "_end");

        // then
        out.println(if_id + "_then:");
        getThen().llvmGen(out);
        out.println("br label %" + if_id + "_end");

        // else
        if (hasElse()) {
            out.println(if_id + "_else:");
            getElse().llvmGen(out);
            out.println("br label %" + if_id + "_end");
        }

        out.println(if_id + "_end:");
    }

    public void WhileStmt.llvmGen(PrintStream out) {
        String w_id = Program.nextWhile();

        out.println("br label %" + w_id); // required to allow placing a label here
        out.println(w_id + ":");
        String cond_var = getCondition().llvmGen(out);
        
        // if cond_var == 1
        out.print("br i1 ");
        out.print(cond_var);
        // then goto
        out.print(", label %");
        out.print(w_id + "_loop");
        // else goto 
        out.print(", label %");
        out.println(w_id + "_end");

        // loop body
        out.println(w_id + "_loop:");
        getLoop().llvmGen(out);
        out.println("br label %" + w_id);
        out.println(w_id + "_end:");
    }

    /*
     * Expressions
     *
     * returns a string representing the name of the temporary variable 
     * containing the result of the expression.
     */

    public String ParamExpr.llvmGen(PrintStream out) {
        return getExpr().llvmGen(out);
    }

    public String NotExpr.llvmGen(PrintStream out) {
        String val = getExpr().llvmGen(out);
        // invert by comparing with zero
        String ret = Program.nextTemp();
        out.print(ret);
        out.print(" = icmp eq i1 0, ");
        out.println(val);
        return ret;
    }

    public String BinExpr.instr() { throw new RuntimeException("Not yet implemented"); }
    public String BinExpr.llvmGen(PrintStream out) {
        String r = Program.nextTemp();
        String a = getLeft().llvmGen(out);
        String b = getRight().llvmGen(out);

        out.print(r);
        out.print(" = ");
        out.print(instr());
        out.print(" ");
        getLeft().type().llvmGen(out);
        out.print(" ");
        out.print(a);
        out.print(", ");
        out.println(b);
        return r;
    }

    public String AddExpr.instr() {
        if (type().equals(new FloatType()))
            return "fadd";
        return "add";
    }

    public String SubExpr.instr() {
        if (type().equals(new FloatType()))
            return "fsub";
        return "sub";
    }

    public String MulExpr.instr() {
        if (type().equals(new FloatType()))
            return "fmul";
        return "mul";
    }

    public String DivExpr.instr() {
        if (type().equals(new FloatType()))
            return "fdiv";
        return "sdiv";
    }

    public String ModExpr.instr() {
        if (type().equals(new FloatType()))
            return "fdiv";
        return "srem";
    }

    syn String AndExpr.instr() = "and";
    syn String OrExpr.instr() = "or";

    syn String EqualsExpr.instr() {
        if (getLeft().type().equals(new FloatType()))
            return "fcmp oeq";
        return "icmp eq";
    }
    syn String NotEqualsExpr.instr() {
        if (getLeft().type().equals(new FloatType()))
            return "fcmp one";
        return "icmp ne";
    }

    // reversed order
    syn String GreaterEqualExpr.instr() {
        if (getLeft().type().equals(new FloatType()))
            return "fcmp oge";
        return "icmp sge";
    }
    syn String LessEqualExpr.instr() {
        if (getLeft().type().equals(new FloatType()))
            return "fcmp ole";
        return "icmp sle";
    }
    syn String LessExpr.instr() {
        if (getLeft().type().equals(new FloatType()))
            return "fcmp olt";
        return "icmp slt";
    }
    syn String GreaterExpr.instr() {
        if (getLeft().type().equals(new FloatType()))
            return "fcmp ogt";
        return "icmp sgt";
    }

    public String FuncExpr.llvmGen(PrintStream out) {
        // parameter expressions
        String[] arg_vars = new String[getNumArgument()];
        for(int i = 0; i < getNumArgument(); i++) {
            arg_vars[i] = getArgument(i).llvmGen(out);
        }

        String r = "NONE";
        if (!getName().type().equals(new VoidType())) {
            r = Program.nextTemp();
            out.print(r);
            out.print(" = ");
        }

        out.print("call ");
        getName().type().llvmType(out);
        out.print(" @");
        out.print(getName());
        out.print("(");

        for(int i = 0; i < arg_vars.length; i++) {
            getArgument(i).type().llvmType(out);
            out.print(" ");
            out.print(arg_vars[i]);
            if (i < arg_vars.length - 1)
                out.print(", ");
        }
        
        out.println(")");
        return r;
    }

    public String Expr.llvmGen(PrintStream out) {
        throw new RuntimeException("Not yet implemented");
    }

    public String IntLiteral.llvmGen(PrintStream out) {
        return String.valueOf(getValue());
    }

    public String FloatLiteral.llvmGen(PrintStream out) {
        return String.valueOf(getValue());
    }

    public String BoolLiteral.llvmGen(PrintStream out) {
        return getValue() ? "1" : "0";
    }

    inh boolean IdDecl.isArgVariable();
    eq Program.getChild().isArgVariable() = false;
    eq Argument.getName().isArgVariable() = true;

    public String IdExpr.llvmGen(PrintStream out) {
        String v = getName().llvmGen(out);
        return v;
    }

    // return a register containing a pointer to a variable
    public String IdUse.llvmGen(PrintStream out) {
        // get a pointer to the value
        String var_ptr = llvmGenAddress(out);
        if (decl().isArgVariable()) {
            // no need to dereference function arguments
            return var_ptr;
        }

        out.println("; IdUse " + getID());
        String ptr = Program.nextTemp();
        out.print(ptr);
        out.print(" = load ");
        type().llvmType(out);
        out.print(", ");
        type().llvmType(out);
        out.print("* ");
        out.println(var_ptr);

        return ptr;
    }

    public String IdUse.llvmGenAddress(PrintStream out) {
        if (decl().isGlobal())
            return "@" + getID();
        return "%" + getID();
    }

    public String StructIdUse.llvmGenAddress(PrintStream out) {
        String struct_ptr = getStruct().llvmGen(out);

        out.println("; StructIdUse " + getID());
        Type st = getStruct().type();
        // calculate field address
        String field_ptr = Program.nextTemp();
        out.print(field_ptr);
        out.print(" = getelementptr ");
        st.llvmGen(out); // struct type
        out.print(", "); 
        st.llvmGen(out); // struct pointer type
        out.print("* ");
        out.print(struct_ptr);
        int field_idx = struct().fieldIndex(getID());
        out.println(", i32 0, i32 " + String.valueOf(field_idx));

        return field_ptr;
    }

    // load the address of a struct and then return the address to a field
    public String StructIdUse.llvmGen(PrintStream out) {
        String field_ptr = llvmGenAddress(out);

        // load field value
        String value_ptr = Program.nextTemp();
        out.print(value_ptr);
        out.print(" = load ");
        type().llvmType(out); // field type
        out.print(", ");
        type().llvmType(out); // field pointer
        out.print("* ");
        out.println(field_ptr);

        return value_ptr;
    }

    // LLVM type names
    public void Type.llvmGen(PrintStream out) {
        throw new RuntimeException("Not yet implemented");
    }
    public void VoidType.llvmGen(PrintStream out) { out.print("void"); }
    public void BoolType.llvmGen(PrintStream out) { out.print("i1"); }
    public void IntType.llvmGen(PrintStream out) { out.print("i64"); }
    public void FloatType.llvmGen(PrintStream out) { out.print("double"); }
    public void UnknownType.llvmGen(PrintStream out) { out.print("void"); } // kind of a hack

    public void StructType.llvmGen(PrintStream out) {
        out.print("%");
        out.print(getName());
    }

    public void Type.llvmType(PrintStream out) { llvmGen(out); }
    public void StructType.llvmType(PrintStream out) {
        llvmGen(out);
        out.print("*");
    }
}
