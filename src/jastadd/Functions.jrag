aspect Functions 
{
    // print int to std in
    class PrintFunction extends Function {
        public PrintFunction(int wtf) {
            super(
                new IdDecl(new TypeId("int"), "print"), 
                new List<Argument>(
                    new Argument(new IdDecl(new TypeId("int"), "value"))
                ), 
                new Block()
            );
        }

        @Override
        public void codeGen(PrintStream out) {
            out.println("print:");
            out.println("    pushq %rbp");
            out.println("    movq %rsp, %rbp");
            out.println("    ### convert integer to string");
            out.println("    movq 16(%rbp), %rax     # parameter");
            out.println("    movq $(buf+1023), %rsi  # write ptr (start from end of buf)");
            out.println("    movb $0x0a, (%rsi)      # insert newline");
            out.println("    movq $1, %rcx           # string length");
            out.println("itoa_loop:                      # do.. while (at least one iteration)");
            out.println("    movq $10, %rbx");
            out.println("    movq $0, %rdx");
            out.println("    idivq %rbx              # divide rdx:rax by 10");
            out.println("    addb $0x30, %dl         # remainder + '0'");
            out.println("    decq %rsi               # move string pointer");
            out.println("    movb %dl, (%rsi)");
            out.println("    incq %rcx               # increment string length");
            out.println("    cmpq $0, %rax");
            out.println("    jg itoa_loop            # produce more digits");
            out.println("itoa_done:");
            out.println("    movq $1, %rdi");
            out.println("    movq %rcx, %rdx");
            out.println("    movq $1, %rax");
            out.println("    syscall");
            out.println("    popq %rbp");
            out.println("    ret");
        }
    }

    // read int from std in
    class ReadFunction extends Function {
        public ReadFunction(int wtf) {
            super(
                new IdDecl(new TypeId("int"), "read"), 
                new List<Argument>(), 
                new Block()
            );
        }

        @Override
        public void codeGen(PrintStream out) {
            out.println("read:");
            out.println("    pushq %rbp");
            out.println("    movq %rsp, %rbp");
            out.println("    movq $0, %rdi");
            out.println("    movq $buf, %rsi");
            out.println("    movq $1024, %rdx");
            out.println("    movq $0, %rax");
            out.println("    syscall                 # %rax = sys_read(0, buf, 1024)");
            out.println("    ### convert string to integer:");
            out.println("    ### %rax contains nchar");
            out.println("    ### %rsi contains ptr");
            out.println("    movq $0, %rdx           # sum = 0");
            out.println("atoi_loop:");
            out.println("    cmpq $0, %rax           # while (nchar > 0)");
            out.println("    jle atoi_done           # leave loop if nchar <= 0");
            out.println("    movzbq (%rsi), %rbx     # move byte, and sign extend to qword");
            out.println("    cmpq $0x30, %rbx        # test if < '0'");
            out.println("    jl atoi_done            # character is not numeric");
            out.println("    cmpq $0x39, %rbx        # test if > '9'");
            out.println("    jg atoi_done            # character is not numeric");
            out.println("    imulq $10, %rdx         # multiply sum by 10");
            out.println("    subq $0x30, %rbx        # value of character");
            out.println("    addq %rbx, %rdx         # add to sum");
            out.println("    incq %rsi               # step to next char");
            out.println("    decq %rax               # nchar--");
            out.println("    jmp atoi_loop           # loop back");
            out.println("atoi_done:");
            out.println("    movq %rdx, %rax         # return value in RAX");
            out.println("    popq %rbp");
            out.println("    ret");
        }
    }

    syn nta List<Function> Program.predefinedFunctions() {
        List<Function> functions = new List<Function>();

        /* void print(int value) */
        functions.add(new PrintFunction(1));

        /* int read() */
        functions.add(new ReadFunction(1));

        return functions;
    }

    inh boolean IdDecl.isFunction();
    inh Function IdDecl.function();

    syn boolean IdUse.isFunction() = decl().isFunction();
    syn Function IdUse.function() = decl().function();

    eq Function.getName().isFunction() = true;
    eq Function.getName().function() = this;

    eq Program.getChild().isFunction() = false;
    eq Program.getChild().function() = unknownFunc();

    syn boolean UnknownDecl.isFunction() = false;
    syn Function UnknownDecl.function() = unknownFunc();

    syn boolean UnknownFunc.isFunction() = true;
    syn Function UnknownFunc.function() = unknownFunc();

    /* Generates a function signature string from a function definition node */
    syn String Function.signature() {
        StringBuilder sb = new StringBuilder();
        sb.append(getName().getID());
        sb.append("(");
        for(int i = 0; i < getNumArgument(); i++) {
            sb.append(getArgument(i).getName().type());
            if (i < getNumArgument()-1)
                sb.append(",");
        }
        sb.append(")");
        return sb.toString();
    }

    /* Generates a call signature string from a function expression node */
    syn String FuncExpr.signature() {
        StringBuilder sb = new StringBuilder();
        sb.append("(");
        for(int i = 0; i < getNumArgument(); i++) {
            sb.append(getArgument(i).type());
            if (i < getNumArgument()-1)
                sb.append(",");
        }
        sb.append(")");
        return sb.toString();
    }
}
