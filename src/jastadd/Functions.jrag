aspect Functions 
{
    // print int to std out
    class PrintFunction extends Function {
        public PrintFunction() {
            super(
                new IdDecl(new TypeId("void"), "print"), 
                new List<Argument>(
                    new Argument(new IdDecl(new TypeId("int"), "value"))
                ), 
                new Block()
            );
        }
        public void llvmGen(PrintStream out) {
            out.println("declare void @print(i64)");
        }
    }

    // read int from std in
    class ReadFunction extends Function {
        public ReadFunction() {
            super(
                new IdDecl(new TypeId("int"), "read"), 
                new List<Argument>(), 
                new Block()
            );
        }
        public void llvmGen(PrintStream out) {
            out.println("declare i64 @read()");
        }
    }

    class AssertFunction extends Function {
        public AssertFunction() {
            super(
                new IdDecl(new TypeId("void"), "assert"),
                new List<Argument>(
                    new Argument(new IdDecl(new TypeId("bool"), "expr"))
                ),
                new Block()
            );
        }
        public void llvmGen(PrintStream out) {
            out.println("declare void @assert(i1)");
        }
    }

    // truncate float to int
    class TruncFunction extends Function {
        public TruncFunction() {
            super(
                new IdDecl(new TypeId("int"), "truncate"),
                new List<Argument>(
                    new Argument(new IdDecl(new TypeId("float"), "f"))
                ),
                new Block()
            );
        }
        public void llvmGen(PrintStream out) {
            out.println("declare i64 @truncate(double)");
        }
    }

    // frac, round, ceil, floor? 

    // promote int to float
    class PromoteFunction extends Function {
        public PromoteFunction() {
            super(
                new IdDecl(new TypeId("float"), "promote"),
                new List<Argument>(
                    new Argument(new IdDecl(new TypeId("int"), "i"))
                ),
                new Block()
            );
        }
        public void llvmGen(PrintStream out) {
            out.println("declare double @promote(i64)");
        }
    }

    syn nta List<Function> Program.predefinedFunctions() {
        List<Function> functions = new List<Function>();

        functions.add(new PrintFunction());
        functions.add(new ReadFunction());
        functions.add(new TruncFunction());
        functions.add(new PromoteFunction());
        functions.add(new AssertFunction());

        return functions;
    }

    inh boolean IdDecl.isFunction();
    inh Function IdDecl.function();

    syn boolean IdUse.isFunction() = decl().isFunction();
    eq StructIdUse.isFunction() = false;

    syn Function IdUse.function() = decl().function();

    eq Function.getName().isFunction() = true;
    eq Function.getName().function() = this;

    eq Program.getChild().isFunction() = false;
    eq Program.getChild().function() = unknownFunc();

    syn boolean UnknownDecl.isFunction() = false;
    syn Function UnknownDecl.function() = unknownFunc();

    syn boolean UnknownFunc.isFunction() = true;
    syn Function UnknownFunc.function() = unknownFunc();

    /* Generates a function signature string from a function definition node */
    syn String Function.signature() {
        StringBuilder sb = new StringBuilder();
        sb.append(getName().getID());
        sb.append("(");
        for(int i = 0; i < getNumArgument(); i++) {
            sb.append(getArgument(i).getName().type());
            if (i < getNumArgument()-1)
                sb.append(",");
        }
        sb.append(")");
        return sb.toString();
    }

    /* Generates a call signature string from a function expression node */
    syn String FuncExpr.signature() {
        StringBuilder sb = new StringBuilder();
        sb.append("(");
        for(int i = 0; i < getNumArgument(); i++) {
            sb.append(getArgument(i).type());
            if (i < getNumArgument()-1)
                sb.append(",");
        }
        sb.append(")");
        return sb.toString();
    }
}
