aspect TypeCheck {
    inh Type IdDecl.expectedType(); 
    syn Type IdDecl.type() = getType().type();

    eq Program.getChild().expectedType() = new UnknownType();

    eq Function.getName().expectedType() = getName().type();
    eq Argument.getName().expectedType() = getName().type();
    eq DeclareStmt.getName().expectedType() = getName().type();

    syn Type IdUse.type() = decl().type();

    syn Type Expr.type()    = new UnknownType(); 
    eq IntLiteral.type()    = new IntType();
    eq BoolLiteral.type()   = new BoolType();
    eq FloatLiteral.type()  = new FloatType();
    eq StringLiteral.type() = new StringType();
    eq FuncExpr.type()      = getName().type();
    eq IdExpr.type()        = getName().type();

    eq EqualsExpr.type()        = new BoolType();
    eq NotEqualsExpr.type()     = new BoolType();
    eq GreaterExpr.type()       = new BoolType();
    eq GreaterEqualExpr.type()  = new BoolType();
    eq LessExpr.type()          = new BoolType();
    eq LessEqualExpr.type()     = new BoolType();
    eq AndExpr.type()           = new BoolType();
    eq OrExpr.type()            = new BoolType();
    eq NotExpr.type()           = new BoolType();
    eq ParamExpr.type()         = getExpr().type();
    eq AddressExpr.type()       = new PointerType(getExpr().type());
    eq DerefExpr.type()         = getExpr().type().dereference();

    eq BinExpr.type() { 
        if (!getLeft().type().equals(getRight().type()))
            return new UnknownType();
        return getLeft().type();
    }

    inh Type Expr.expectedType();

    inh boolean Expr.typeMatch(Type t);
    eq AssignStmt.getAssignExpr().typeMatch(Type t)  = t.equals(getName().decl().type());
    eq DeclareStmt.getAssignExpr().typeMatch(Type t) = t.equals(getName().type());
    eq WhileStmt.getCondition().typeMatch(Type t)    = t.equals(new BoolType());
    eq IfStmt.getCondition().typeMatch(Type t)       = t.equals(new BoolType());
    eq ReturnStmt.getReturnExpr().typeMatch(Type t)  = t.equals(expectedType());
    eq CallStmt.getFunction().typeMatch(Type t)      = true; /* call statements dont return anything */

    eq BinExpr.getLeft().typeMatch(Type t) {
        if (!t.equals(getRight().type()))
            return false;
        return t.equals(expectedType());
    }
    eq BinExpr.getRight().typeMatch(Type t) {
        if (!t.equals(getLeft().type()))
            return false;
        return t.equals(expectedType());
    }
    eq ParamExpr.getExpr().typeMatch(Type t) {
        return t.equals(expectedType());
    }

    inh Type Block.expectedType();
    eq Function.getBody().expectedType() = getName().type();

    inh Type Statement.expectedType(); 
    eq ReturnStmt.getReturnExpr().expectedType() = expectedType();
    eq AssignStmt.getAssignExpr().expectedType() = getName().type();
    eq DeclareStmt.getAssignExpr().expectedType() = getName().type();

    syn boolean Statement.typeError() = false;
    
    syn boolean ReturnStmt.typeError() = !expectedType().equals(getReturnExpr().type());

    syn boolean TypeId.invalidType() = type().isUnknownType();

    syn boolean DeclareStmt.typeError() {
        if (!hasAssignExpr())
            return false;
        return !getName().type().equals(getAssignExpr().type());
    }

    syn boolean AssignStmt.typeError() {
        return !getName().type().equals(getAssignExpr().type());
    }

    syn boolean IfStmt.typeError() {
        return !getCondition().type().equals(new BoolType());
    }

    syn boolean WhileStmt.typeError() {
        return !getCondition().type().equals(new BoolType());
    }

    syn boolean AssignStmt.assignFuncError() = getName().isFunction();

    syn boolean FuncExpr.typeError() {
        /* argument errors */
        if (!getName().isFunction())
            return true;
        return false;
    }

    syn boolean FuncExpr.paramError() {
        Function func = getName().function();
        return getNumArgument() != func.getNumArgument();
    }

    syn boolean FuncExpr.paramTypeError() {
        Function func = getName().function();
        for(int i = 0; i < getNumArgument(); i++) {
            if (!getArgument(i).type().equals(func.getArgument(i).getName().type()))
                return true;
        }
        return false;
    }

    syn boolean BinExpr.typeError() {
        return !getLeft().type().equals(getRight().type());
    }

    syn boolean AddExpr.nonNumericError() { return !(type().equals(new IntType()) || type().equals(new FloatType())); }
    syn boolean SubExpr.nonNumericError() { return !(type().equals(new IntType()) || type().equals(new FloatType())); }
    syn boolean MulExpr.nonNumericError() { return !(type().equals(new IntType()) || type().equals(new FloatType())); }
    syn boolean DivExpr.nonNumericError() { return !(type().equals(new IntType()) || type().equals(new FloatType())); }
    syn boolean ModExpr.nonNumericError() { return !(type().equals(new IntType()) || type().equals(new FloatType())); }
    /* todo: add boolean checks for logic operators */
}
