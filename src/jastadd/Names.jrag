aspect Names {
    syn IdDecl IdUse.decl() = lookup(getID(), false);

    syn IdDecl StructIdUse.decl() { 
        // find struct type
        Struct s = struct();
        if (s.isUnknown())
            return unknownDecl();

        return s.find(getID());
    }

    syn Struct StructIdUse.struct() {
        // lookup parent struct id
        IdDecl struct_decl = lookup(getStruct().getID(), false);
        // find struct type
        return structLookup(struct_decl.getType().getID());
    }

    syn String IdDecl.toString() = getType().getID() + " " + getID();
    syn String StructIdUse.toString() = getStruct().toString() + "." + getID();
    syn String IdUse.toString() = getID();

    syn boolean IdUse.isStructId() = false;
    eq StructIdUse.isStructId() = true;

    syn boolean StructIdUse.structNameError() = decl().isUnknown(); 
    
    inh IdDecl IdUse.lookup(String name, boolean in_scope);
    inh IdDecl IdDecl.lookup(String name, boolean in_scope);
    inh IdDecl Function.lookup(String name, boolean in_scope);
    inh IdDecl Block.lookup(String name, boolean in_scope);

    inh Struct StructIdUse.structLookup(String struct);

    syn IdDecl Unit.find(String name) = unknownDecl();
    syn IdDecl Global.find(String name) = getDeclareStmt().findLocal(name);

    eq Struct.find(String name) {
        for (int i = 0; i < getNumStructDecl(); i++) {
            IdDecl decl = getStructDecl(i).find(name);
            if (!decl.isUnknown())
                return decl;
        }
        return unknownDecl();
    }

    syn int Struct.fieldIndex(String field) {
        for (int i = 0; i < getNumStructDecl(); i++) {
            IdDecl decl = getStructDecl(i).find(field);
            if (!decl.isUnknown())
                return i;
        }
        return -1;
    }

    syn String IdUse.baseName() = getID();
    eq StructIdUse.baseName() = getStruct().baseName();

    syn Type IdUse.baseType() = type();
    eq StructIdUse.baseType() = getStruct().baseType();

    syn IdDecl StructDecl.find(String name) = unknownDecl();
    eq Field.find(String name) {
        if (getIdDecl().getID().equals(name))
            return getIdDecl();
        return unknownDecl();
    }

    /* Top level lookup - checks global variables and function names */
    eq Program.getChild().lookup(String name, boolean in_scope) {
        for(int i = 0; i < getNumUnit(); i++) {
            IdDecl decl = getUnit(i).find(name);
            if (!decl.isUnknown())
                return decl;
        }

        /* Predefined functions */
        /* TODO: disallow overwriting predefined functions */
        for(Function func: predefinedFunctions()) {
            IdDecl decl = func.find(name);
            if (!decl.isUnknown())
                return decl;
        }

        /* Nothing found yet = undeclared identifier */
        return unknownDecl();
    }

    eq Program.getChild().structLookup(String struct) {
        for(int i = 0; i < getNumUnit(); i++) {
            Struct s = getUnit(i).findStruct(struct);
            if (!s.isUnknown())
                return s;
        }
        return unknownStruct();
    }

    /* Finds names of functions */
    syn IdDecl Function.find(String name) {
        IdDecl func_decl = getName();
        if (func_decl.getID().equals(name)) {
            return func_decl;
        }
        return unknownDecl();
    }

    /* Look for an identifier among the first N arguments */
    syn IdDecl Function.findLocal(String name) = findLocal(name, getNumArgument());
    syn IdDecl Function.findLocal(String name, int until) {
        for(int i = 0; i < until; i++) {
            IdDecl arg = getArgument(i).getName();
            if (arg.getID().equals(name))
                return arg;
        }
        return unknownDecl();
    }

    /* Check if a function argument is previously defined */
    eq Function.getArgument(int index).lookup(String name, boolean in_scope) {
        IdDecl decl = findLocal(name, index);
        if (!decl.isUnknown())
            return decl;

        /* Parameter ok */
        return unknownDecl();
    }

    /* Check if a declare statement overwrites a previously defined variable */
    eq Block.getStatement(int index).lookup(String name, boolean in_scope) {
        IdDecl decl = findLocal(name, index);
        if (!decl.isUnknown())
            return decl;

        /* we're only checking the current scope */
        if (in_scope)
            return unknownDecl();

        /* pass up to function */
        return lookup(name, in_scope);
    }

    /* Find definitions in blocks */
    syn IdDecl Block.findLocal(String name) = findLocal(name, getNumStatement());
    syn IdDecl Block.findLocal(String name, int until) {
        for(int i = 0; i < until; i++) {
            IdDecl decl = getStatement(i).findLocal(name);
            if (!decl.isUnknown())
                return decl;
        }
        return unknownDecl();
    }

    /* Find definitions in statements */
    syn IdDecl Statement.findLocal(String name) = unknownDecl();
    syn IdDecl DeclareStmt.findLocal(String name) {
        if (getName().getID().equals(name))
            return getName();
        return unknownDecl();
    }

    /* Check if a variable used within the function of a block is defined as a function argument */
    eq Function.getBody().lookup(String name, boolean in_scope) {
        IdDecl decl = findLocal(name);
        if (!decl.isUnknown())
            return decl;

        /* pass up to globals */
        return lookup(name, in_scope);
    }

    /* Used to look for previous variable declarations within structs */
    eq Struct.getStructDecl(int idx).lookup(String name, boolean in_scope) {
        for(int i = 0; i < idx; i++) {
            IdDecl decl = getStructDecl(i).find(name);
            if (!decl.isUnknown())
                return decl;
        }
        return unknownDecl();
    }

	syn boolean IdDecl.isMultiplyDeclared() {
        IdDecl prev_decl = lookup(getID(), true);
        if (prev_decl.isUnknown())
            return false;
        /* only if they are in the same block? */
        return prev_decl != this;
    }
}
