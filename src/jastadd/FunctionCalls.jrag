import java.util.Set;
import java.util.HashSet;

aspect FunctionCalls {
	coll Set<Function> Function.calls()     [ new HashSet<Function>() ] with add root Function;
	coll Set<Function> Function.reachable() [ new HashSet<Function>() ] with addAll root Function;
	coll Set<Function> Program.functions()  [ new HashSet<Function>() ] with add root Program;

    public Set<Function> Function.getCalls() {
        return new HashSet<Function>();
    }

    inh Function Statement.enclosingFunction(); 
    inh Function Expr.enclosingFunction();

    eq Block.getStatement(int index).enclosingFunction() {
        return enclosingFunction();
    }

    eq Function.getBlock().enclosingFunction() {
        return this;
    }

    syn Set<Function> Function.get_reachable() {
        return this.get_reachable(new HashSet<Function>());
    }

    public Set<Function> Function.get_reachable(Set<Function> set) {
        for(Function f : calls()) {
            if(set.add(f))
                f.get_reachable(set);
        }
        return set;
    }
}

aspect FunctionCallContribs {
    FuncExpr contributes getName().function()
        to Function.calls() for enclosingFunction();

    Function contributes get_reachable()
        to Function.reachable() for this;

    Function contributes this
        to Program.functions() for program();
}
