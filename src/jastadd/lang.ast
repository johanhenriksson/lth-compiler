/* 
 * Goal: Program
 */
Program  ::= List;

abstract Unit;
Global : Unit ::= DeclareStmt;

/* Structs */
Struct : Unit ::= IdDecl List;
abstract StructDecl;
StructVar : StructDecl ::= TypeId IdDecl;
StructFunc : StructDecl ::= Function;

/* Functions */
Function : Unit ::= TypeId IdDecl List Block;
ArgDef   ::= TypeId IdDecl;

/* Statements */
abstract Statement;

Block        : Statement ::= List;
AssignStmt   : Statement ::= IdUse Expr;
DeclareStmt  : Statement ::= TypeId IdDecl [ Expr ];
WhileStmt    : Statement ::= Expr Statement;
IfStmt       : Statement ::= Expr Then:Statement [ Else:Statement ];
CallStmt     : Statement ::= FuncExpr;
ReturnStmt   : Statement ::= [ Expr ];
BreakStmt    : Statement;
ContinueStmt : Statement;

/* Expressions */
abstract Expr;
BinExpr  : Expr ::= Left:Expr Right:Expr;

/* Variables & Function calls */
FuncExpr : Expr ::= IdUse List;

/* Logical operators */
NotExpr : Expr ::= Expr;
AndExpr : BinExpr;
OrExpr  : BinExpr;

/* Comparison operators */
EqualsExpr       : BinExpr;
NotEqualsExpr    : BinExpr;
LessExpr         : BinExpr;
LessEqualExpr    : BinExpr;
GreaterEqualExpr : BinExpr;
GreaterExpr      : BinExpr;

/* Arithmetic operators */
AddExpr : BinExpr;
SubExpr : BinExpr;
MulExpr : BinExpr;
DivExpr : BinExpr;
ModExpr : BinExpr;

/* Literals */
abstract Literal : Expr;

IntLiteral    : Literal ::= <INT:String>;
BoolLiteral   : Literal ::= <BOOL:String>;
FloatLiteral  : Literal ::= <FLOAT:String>;
StringLiteral : Literal ::= <STRING:String>;

/* Identifiers */
IdUse : Expr ::= <ID:String>;
IdDecl ::= <ID:String>;

/* Type Names */
TypeId ::= <ID:String>;
