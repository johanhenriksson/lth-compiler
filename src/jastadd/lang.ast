Program ::= Function;

Function ::= TypeId IdDecl List Block;
ArgDef ::= TypeId IdDecl;

abstract Statement;
Block: Statement ::= List;
AssignStmt: Statement ::= IdUse Expr;
DeclareStmt: Statement ::= TypeId IdDecl;
WhileStmt: Statement ::= Expr Statement;
IfStmt: Statement ::= Expr Then:Statement [Else:Statement];

/* Expressions */
abstract Expr;
IdExpr: Expr ::= IdUse;
UnaryExpr: Expr ::= Expr;
BinExpr: Expr ::= Left:Expr Right:Expr;

/* Comparison */
NotExpr: UnaryExpr ::=;
EqualsExpr: BinExpr ::=;
NotEqualsExpr: BinExpr ::=;
LessExpr: BinExpr ::=;
LessEqualExpr: BinExpr ::=;
GreaterEqualExpr: BinExpr ::=;
GreaterExpr: BinExpr ::=;

/* Arithmetic */
AddExpr: BinExpr ::=;
SubExpr: BinExpr ::=;
MulExpr: BinExpr ::=;
DivExpr: BinExpr ::=;

/* Literals */
abstract Literal: Expr;
Numeral: Literal ::= <NUM:String>;
TrueLiteral: Literal ::= <TRUE:String>;
FalseLiteral: Literal ::= <FALSE:String>;
StringLiteral: Literal ::= <STRING:String>;

IdUse ::= <ID:String>;
IdDecl ::= <ID:String>;
TypeId ::= <ID:String>;
