Program ::= List;

/* Functions */
Function ::= TypeId IdDecl List Block;
ArgDef   ::= TypeId IdDecl;

/* Statements */
abstract Statement;

Block       : Statement ::= List;
AssignStmt  : Statement ::= IdUse Expr;
DeclareStmt : Statement ::= TypeId IdDecl [Expr];
WhileStmt   : Statement ::= Expr Statement;
IfStmt      : Statement ::= Expr Then:Statement [Else:Statement];
CallStmt    : Statement ::= FuncExpr;
ReturnStmt  : Statement ::= [Expr];

/* Expressions */
abstract Expr;
BinExpr  : Expr ::= Left:Expr Right:Expr;

/* Variables & Function calls */
IdExpr   : Expr ::= IdUse;
FuncExpr : Expr ::= IdUse List;

/* Logical operators */
NotExpr : Expr    ::=;
AndExpr : BinExpr ::=;
OrExpr  : BinExpr ::=;

/* Comparison operators */
EqualsExpr       : BinExpr ::=;
NotEqualsExpr    : BinExpr ::=;
LessExpr         : BinExpr ::=;
LessEqualExpr    : BinExpr ::=;
GreaterEqualExpr : BinExpr ::=;
GreaterExpr      : BinExpr ::=;

/* Arithmetic operators */
AddExpr: BinExpr ::=;
SubExpr: BinExpr ::=;
MulExpr: BinExpr ::=;
DivExpr: BinExpr ::=;
ModExpr: BinExpr ::=;

/* Literals */
abstract Literal: Expr;

IntLiteral    : Literal ::= <INT:String>;
BoolLiteral   : Literal ::= <BOOL:String>;
FloatLiteral  : Literal ::= <FLOAT:String>;
StringLiteral : Literal ::= <STRING:String>;

/* Identifiers */
IdUse  ::= <ID:String>;
IdDecl ::= <ID:String>;

/* Type Names */
TypeId ::= <ID:String>;
