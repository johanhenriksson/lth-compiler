/* Goal: Program */
Program  ::= Unit*;

/* Types */
TypeId ::= <ID:String>;
TypeDecl ::= <ID:String>;
PointerTypeId : TypeId;

abstract Type; 
IntType: Type;
BoolType: Type;
VoidType: Type;
FloatType: Type;
StringType: Type;
PointerType: Type ::= To:Type;
StructType: Type ::= <Name:String>;
UnknownType: Type;

abstract Unit;
Global : Unit ::= DeclareStmt;

/* Structs */
Struct : Unit ::= Name:TypeDecl StructDecl*;
abstract StructDecl;
StructVar : StructDecl ::= IdDecl;

/* Functions */
Function : Unit ::= Name:IdDecl Argument* Block;
PrintFunction : Function;
ReadFunction : Function;

Argument ::= Name:IdDecl;

/* Statements */
abstract Statement;

Block        : Statement ::= Statement*;
AssignStmt   : Statement ::= Name:IdUse AssignExpr:Expr;
DeclareStmt  : Statement ::= Name:IdDecl [ AssignExpr:Expr ];
WhileStmt    : Statement ::= Condition:Expr Loop:Statement;
IfStmt       : Statement ::= Condition:Expr Then:Statement [ Else:Statement ];
CallStmt     : Statement ::= Function:FuncExpr;
ReturnStmt   : Statement ::= [ ReturnExpr:Expr ];
BreakStmt    : Statement;
ContinueStmt : Statement;

/* Expressions */
abstract Expr;
abstract BinExpr : Expr ::= Left:Expr Right:Expr;
ParamExpr : Expr ::= Expr;

/* Variables & Function calls */
DerefExpr : Expr ::= Expr;
AddressExpr : Expr ::= Expr;
IdExpr : Expr ::= Name:IdUse;
FuncExpr : Expr ::= Name:IdUse Argument:Expr*;

/* Logical operators */
NotExpr : Expr ::= Expr;
AndExpr : BinExpr;
OrExpr  : BinExpr;

/* Comparison operators */
EqualsExpr       : BinExpr;
NotEqualsExpr    : BinExpr;
LessExpr         : BinExpr;
LessEqualExpr    : BinExpr;
GreaterEqualExpr : BinExpr;
GreaterExpr      : BinExpr;

/* Arithmetic operators */
AddExpr : BinExpr;
SubExpr : BinExpr;
MulExpr : BinExpr;
DivExpr : BinExpr;
ModExpr : BinExpr;

/* Literals */
abstract Literal : Expr;

IntLiteral    : Literal ::= <INT:String>;
BoolLiteral   : Literal ::= <BOOL:String>;
FloatLiteral  : Literal ::= <FLOAT:String>;
StringLiteral : Literal ::= <STRING:String>;

/* Identifiers */
IdUse ::= <ID:String>;
IdDecl ::= Type:TypeId <ID:String>;
UnknownDecl : IdDecl;
UnknownFunc : Function;
