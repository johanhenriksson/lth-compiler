import java.util.Set;
import java.util.TreeSet;

aspect Errors {
	public class ErrorMessage implements Comparable<ErrorMessage> {
		protected final String message;
		protected final int lineNumber;
        protected final int lineCol;

		public ErrorMessage(String message, int lineNumber, int lineCol) {
			this.message = message;
			this.lineNumber = lineNumber;
            this.lineCol = lineCol;
		}
		public int compareTo(ErrorMessage other) {
			if (lineNumber == other.lineNumber) {
				return message.compareTo(other.message);
			}
			return Integer.compare(lineNumber, other.lineNumber); 
		}
		public String toString() {
			return "Error at line " + lineNumber  + "," + lineCol + ": " + message;
		}
	} 

	protected ErrorMessage ASTNode.error(String message) {
		return new ErrorMessage(message, getLine(getStart()), getColumn(getStart()));
	}

	coll Set<ErrorMessage> Program.errors() [new TreeSet<ErrorMessage>()] with add root Program;

	inh Program ASTNode.program();
	eq Program.getChild().program() = this;
}

aspect ErrorContributions {
	IdUse contributes error("symbol '" + getID() + "' is not declared")
		when decl().isUnknown()
		to Program.errors() for program();

	IdDecl contributes error("symbol '" + getID() + "' is already declared!")
		when isMultiplyDeclared()
		to Program.errors() for program();

    ReturnStmt contributes error("expected return type " + expectedType().toString() + ", got " + getReturnExpr().type().toString())
        when typeError()
        to Program.errors() for program();

    AssignStmt contributes error("cannot assign '" + getName().getID() + "' of type " + getName().type().toString() + ", got " + getAssignExpr().type().toString())
        when typeError()
        to Program.errors() for program();

    DeclareStmt contributes error("cannot assign '" + getName().getID() + "' of type " + getName().type().toString() + ", got " + getAssignExpr().type().toString())
        when typeError()
        to Program.errors() for program();

    BinExpr contributes error("mismatched operands " + getLeft().type() + " and " + getRight().type())
        when typeError()
        to Program.errors() for program();

    FuncExpr contributes error("cannot call '" + getName().getID() + "': not a function")
        when typeError()
        to Program.errors() for program();

    FuncExpr contributes error("cannot call '" + getName().getID() + "': expected " + getName().function().getNumArgument() + " arguments, got " + getNumArgument())
        when getName().isFunction() && paramError()
        to Program.errors() for program();

    FuncExpr contributes error("cannot call '" + getName().getID() + "': parameter type mismatch.\n\tSignature: " + getName().function().signature() + " called with " + signature())
        when getName().isFunction() && !paramError() && paramTypeError()
        to Program.errors() for program();
}
