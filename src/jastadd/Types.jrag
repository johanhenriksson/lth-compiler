aspect Types {
    syn nta List<Type> Program.predefinedTypes() {
        List<Type> types = new List<Type>();

        types.add(new UnknownType());
        types.add(new VoidType());
        types.add(new IntType());
        types.add(new BoolType());
        types.add(new StringType());
        types.add(new FloatType());

        return types;
    }

    syn Type TypeId.type() {
        switch(getID()) {
            case "int": return new IntType();
            case "bool": return new BoolType();
            case "void": return new VoidType();
            case "float": return new FloatType();
            case "string": return new StringType();
        }
        return new UnknownType();
    }

    syn boolean Type.equals(Object other) {
        if (!(other instanceof Type))
            return false;
        return toString().equals(((Type)other).toString());
    }

    syn String IntType.toString() = "int";
    syn String BoolType.toString() = "bool";
    syn String VoidType.toString() = "void";
    syn String FloatType.toString() = "float";
    syn String StringType.toString() = "string";
    syn String UnknownType.toString() = "<unknown>";
}
